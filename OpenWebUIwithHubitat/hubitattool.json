[{"id":"hubitattool","user_id":"d9f3ccff-dd51-4e35-844b-43fb9e83a516","name":"HubitatTool","content":"import os\nimport requests\nfrom datetime import datetime\nfrom pydantic import BaseModel, Field\n\n\nclass Tools:\n    def __init__(self):\n        pass\n\n    # Add your custom tools using pure Python code here, make sure to add type hints and descriptions\n\n    def get_user_name_and_email_and_id(self, __user__: dict = {}) -> str:\n        \"\"\"\n        Get the user name, Email and ID from the user object.\n        \"\"\"\n\n        # Do not include a descrption for __user__ as it should not be shown in the tool's specification\n        # The session user object will be passed as a parameter when the function is called\n\n        print(__user__)\n        result = \"\"\n\n        if \"name\" in __user__:\n            result += f\"User: {__user__['name']}\"\n        if \"id\" in __user__:\n            result += f\" (ID: {__user__['id']})\"\n        if \"email\" in __user__:\n            result += f\" (Email: {__user__['email']})\"\n\n        if result == \"\":\n            result = \"User: Unknown\"\n\n        return result\n\n    def get_current_time(self) -> str:\n        \"\"\"\n        Get the current time in a more human-readable format.\n        \"\"\"\n\n        now = datetime.now()\n        current_time = now.strftime(\"%I:%M:%S %p\")  # Using 12-hour format with AM/PM\n        current_date = now.strftime(\n            \"%A, %B %d, %Y\"\n        )  # Full weekday, month name, day, and year\n\n        return f\"Current Date and Time = {current_date}, {current_time}\"\n\n    def get_current_weather(\n        self,\n        city: str = Field(\n            \"New York, NY\", description=\"Get the current weather for a given city.\"\n        ),\n    ) -> str:\n        \"\"\"\n        Get the current weather for a given city.\n        \"\"\"\n\n        #        api_key = os.getenv(\"OPENWEATHER_API_KEY\")\n        api_key = \"04811e146d6f0e5b312753013890309c\"\n        if not api_key:\n            return (\n                \"API key is not set in the environment variable 'OPENWEATHER_API_KEY'.\"\n            )\n\n        base_url = \"http://api.openweathermap.org/data/2.5/weather\"\n        params = {\n            \"q\": city,\n            \"appid\": api_key,\n            \"units\": \"metric\",  # Optional: Use 'imperial' for Fahrenheit\n        }\n\n        try:\n            response = requests.get(base_url, params=params)\n            response.raise_for_status()  # Raise HTTPError for bad responses (4xx and 5xx)\n            data = response.json()\n\n            if data.get(\"cod\") != 200:\n                return f\"Error fetching weather data: {data.get('message')}\"\n\n            weather_description = data[\"weather\"][0][\"description\"]\n            temperature = data[\"main\"][\"temp\"]\n            humidity = data[\"main\"][\"humidity\"]\n            wind_speed = data[\"wind\"][\"speed\"]\n\n            return f\"Weather in {city}: {temperature}Â°C\"\n        except requests.RequestException as e:\n            return f\"Error fetching weather data: {str(e)}\"\n\n    def control_device(\n        self,\n        device: str = Field(\"Kitchen Light\", description=\"Device(s) name to control\"),\n        #        room: str = Field(\"Kitchen\", description=\"Area, Room, or grouping of devices\"),\n        command: str = Field(\"on\", description=\"Command to call on device\"),\n        newValue: str = Field(\"on\", description=\"Vale of command\"),\n    ) -> str:\n        \"\"\"\n        Control device in Hubitat home\n        \"\"\"\n        api_key = os.getenv(\"hubitat_apiKey\")\n        appID = os.getenv(\"hubitat_appID\")\n        #        api_key = \"1a07b092-3b1a-4c56-9938-91facdf09e16\"\n        if not api_key:\n            return (\n                \"API key is not set in the environment variable 'OPENWEATHER_API_KEY'.\"\n            )\n\n        base_url = \"http://192.168.86.35/apps/api/\" + appID + \"/\"\n\n        params = {\n            \"access_token\": api_key,\n            \"tool_call\": \"control_device\",\n            \"device\": device,\n            #            \"room\": room,\n            \"command\": command,\n            \"value\": newValue,  # Optional: Use 'imperial' for Fahrenheit\n        }\n\n        try:\n            response = requests.post(base_url, params=params)\n            response.raise_for_status()  # Raise HTTPError for bad responses (4xx and 5xx)\n            data = response.json()\n\n            if data.get(\"status\") != \"success\":\n                return f\"Error fetching weather data: {data.get('message')}\"\n\n            #            weather_description = data[\"weather\"][0][\"description\"]\n            #            temperature = data[\"main\"][\"temp\"]\n            #            humidity = data[\"main\"][\"humidity\"]\n            #            wind_speed = data[\"wind\"][\"speed\"]\n\n            return f\"{data.get('message')}\"\n        except requests.RequestException as e:\n            return f\"Error fetching weather data: {str(e)}\"\n\n    def device_state_lookup(\n        self,\n        device: str = Field(\"Kitchen Light\", description=\"Device(s) name to control\"),\n        stateType: str = Field(\n            \"temperature\", description=\"State attribute to look up \"\n        ),\n    ) -> str:\n        \"\"\"\n        Used to look up device state/attributes in the home\n        \"\"\"\n\n        api_key = os.getenv(\"hubitat_apiKey\")\n        appID = os.getenv(\"hubitat_appID\")\n        #        api_key = \"1a07b092-3b1a-4c56-9938-91facdf09e16\"\n        if not api_key:\n            return (\n                \"API key is not set in the environment variable 'OPENWEATHER_API_KEY'.\"\n            )\n\n        base_url = \"http://192.168.86.35/apps/api/\" + appID + \"/\"\n\n        params = {\n            \"access_token\": api_key,\n            \"tool_call\": \"device_state_lookup\",\n            \"device\": device,\n            \"stateType\": stateType,\n        }\n\n        try:\n            response = requests.post(base_url, params=params)\n            response.raise_for_status()  # Raise HTTPError for bad responses (4xx and 5xx)\n            data = response.json()\n\n            if data.get(\"status\") != \"success\":\n                return f\"Error fetching weather data: {data.get('message')}\"\n\n            #            weather_description = data[\"weather\"][0][\"description\"]\n            #            temperature = data[\"main\"][\"temp\"]\n            #            humidity = data[\"main\"][\"humidity\"]\n            #            wind_speed = data[\"wind\"][\"speed\"]\n\n            return f\"{data.get('message')}\"\n        except requests.RequestException as e:\n            return f\"Error fetching weather data: {str(e)}\"\n","specs":[{"name":"control_device","description":"Control device in Hubitat home","parameters":{"properties":{"device":{"default":"Kitchen Light","description":"Device(s) name to control","type":"string"},"command":{"default":"on","description":"Command to call on device","type":"string"},"newValue":{"default":"on","description":"Vale of command","type":"string"}},"type":"object"}},{"name":"device_state_lookup","description":"Used to look up device state/attributes in the home","parameters":{"properties":{"device":{"default":"Kitchen Light","description":"Device(s) name to control","type":"string"},"stateType":{"default":"temperature","description":"State attribute to look up ","type":"string"}},"type":"object"}},{"name":"get_current_time","description":"Get the current time in a more human-readable format.","parameters":{"properties":{},"type":"object"}},{"name":"get_current_weather","description":"Get the current weather for a given city.","parameters":{"properties":{"city":{"default":"New York, NY","description":"Get the current weather for a given city.","type":"string"}},"type":"object"}},{"name":"get_user_name_and_email_and_id","description":"Get the user name, Email and ID from the user object.","parameters":{"properties":{},"type":"object"}}],"meta":{"description":"HubitatTool","manifest":{}},"access_control":{},"updated_at":1759072785,"created_at":1759072785}]